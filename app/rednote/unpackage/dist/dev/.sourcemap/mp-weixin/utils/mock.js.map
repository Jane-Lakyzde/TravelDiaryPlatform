{"version":3,"file":"mock.js","sources":["utils/mock.js"],"sourcesContent":["/**\r\n * 模拟API数据\r\n * 用于前端开发阶段测试，实际项目中应替换为真实API\r\n */\r\n\r\n// 开启模拟数据开关（在正式环境中改为false）\r\nexport const MOCK_ENABLED = true;\r\n\r\n// 模拟延迟时间(ms)\r\nconst DELAY = 800;\r\n\r\n// 模拟用户数据\r\nconst mockUserData = {\r\n  token: 'mock_token_abcdef123456',\r\n  userInfo: {\r\n    email: '10001@163.com',\r\n    username: '旅行者',\r\n    avatar: '../static/images/touxiang.jpg',\r\n\r\n    bio: 1,\r\n    posts: 0,\r\n    followers: 0,\r\n    following: 0,\r\n  }\r\n};\r\n\r\n// 模拟测试账号\r\nconst mockAccounts = [\r\n  { phone: '13800138000', password: '123456' },\r\n  { phone: '13900139000', password: '123456' }\r\n];\r\n\r\n// 模拟响应结构\r\nconst mockResponse = (data, message = 'success', code = 0) => {\r\n  return {\r\n    code,\r\n    message,\r\n    data\r\n  };\r\n};\r\n\r\n// 模拟API请求\r\nexport const mockRequest = (api, params) => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      let result;\r\n      \r\n      // 根据API路径模拟不同的响应数据\r\n      switch (api) {\r\n        case '/api/user/login':\r\n          // 微信登录\r\n          if (params.loginType === 'wechat' && params.code) {\r\n            result = mockResponse(mockUserData);\r\n          } else {\r\n            result = mockResponse(null, '无效的登录参数', -1);\r\n          }\r\n          break;\r\n          \r\n        case '/api/user/phone-login':\r\n          // 手机号登录\r\n          if (params.phone && params.password) {\r\n            // 检查账号密码是否匹配\r\n            const matchedAccount = mockAccounts.find(\r\n              account => account.phone === params.phone && account.password === params.password\r\n            );\r\n            \r\n            if (matchedAccount) {\r\n              result = mockResponse(mockUserData);\r\n            } else {\r\n              result = mockResponse(null, '手机号或密码错误', -1);\r\n            }\r\n          } else if (params.phone && params.code) {\r\n            // 验证码登录\r\n            result = mockResponse(mockUserData);\r\n          } else {\r\n            result = mockResponse(null, '登录参数错误', -1);\r\n          }\r\n          break;\r\n          \r\n        case '/api/user/info':\r\n          // 获取用户信息\r\n          result = mockResponse(mockUserData.userInfo);\r\n          break;\r\n          \r\n        default:\r\n          result = mockResponse(null, '未知的API', -1);\r\n      }\r\n      \r\n      resolve(result);\r\n    }, DELAY);\r\n  });\r\n};\r\n\r\nexport default {\r\n  MOCK_ENABLED,\r\n  mockRequest\r\n}; "],"names":[],"mappings":";AASA,MAAM,QAAQ;AAGd,MAAM,eAAe;AAAA,EACnB,OAAO;AAAA,EACP,UAAU;AAAA,IACR,OAAO;AAAA,IACP,UAAU;AAAA,IACV,QAAQ;AAAA,IAER,KAAK;AAAA,IACL,OAAO;AAAA,IACP,WAAW;AAAA,IACX,WAAW;AAAA,EACZ;AACH;AAGA,MAAM,eAAe;AAAA,EACnB,EAAE,OAAO,eAAe,UAAU,SAAU;AAAA,EAC5C,EAAE,OAAO,eAAe,UAAU,SAAU;AAC9C;AAGA,MAAM,eAAe,CAAC,MAAM,UAAU,WAAW,OAAO,MAAM;AAC5D,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,EACJ;AACA;AAGY,MAAC,cAAc,CAAC,KAAK,WAAW;AAC1C,SAAO,IAAI,QAAQ,CAAC,YAAY;AAC9B,eAAW,MAAM;AACf,UAAI;AAGJ,cAAQ,KAAG;AAAA,QACT,KAAK;AAEH,cAAI,OAAO,cAAc,YAAY,OAAO,MAAM;AAChD,qBAAS,aAAa,YAAY;AAAA,UAC9C,OAAiB;AACL,qBAAS,aAAa,MAAM,WAAW,EAAE;AAAA,UAC1C;AACD;AAAA,QAEF,KAAK;AAEH,cAAI,OAAO,SAAS,OAAO,UAAU;AAEnC,kBAAM,iBAAiB,aAAa;AAAA,cAClC,aAAW,QAAQ,UAAU,OAAO,SAAS,QAAQ,aAAa,OAAO;AAAA,YACvF;AAEY,gBAAI,gBAAgB;AAClB,uBAAS,aAAa,YAAY;AAAA,YAChD,OAAmB;AACL,uBAAS,aAAa,MAAM,YAAY,EAAE;AAAA,YAC3C;AAAA,UACF,WAAU,OAAO,SAAS,OAAO,MAAM;AAEtC,qBAAS,aAAa,YAAY;AAAA,UAC9C,OAAiB;AACL,qBAAS,aAAa,MAAM,UAAU,EAAE;AAAA,UACzC;AACD;AAAA,QAEF,KAAK;AAEH,mBAAS,aAAa,aAAa,QAAQ;AAC3C;AAAA,QAEF;AACE,mBAAS,aAAa,MAAM,UAAU,EAAE;AAAA,MAC3C;AAED,cAAQ,MAAM;AAAA,IACf,GAAE,KAAK;AAAA,EACZ,CAAG;AACH;;"}