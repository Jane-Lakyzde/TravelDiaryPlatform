{"version":3,"file":"request.js","sources":["utils/request.js"],"sourcesContent":["/**\r\n * 请求封装模块\r\n * 处理通用的请求逻辑，如添加token、错误处理等\r\n */\r\n\r\n// 导入模拟数据工具\r\nimport { MOCK_ENABLED, mockRequest } from './mock';\r\n\r\n// 服务器API基础URL，根据实际环境配置\r\nconst BASE_URL = 'https://127.0.0.1.3000'; // 替换为你的实际API地址\r\n\r\n// 创建请求对象\r\nconst http = {\r\n  request(options = {}) {\r\n    const url = options.url;\r\n    \r\n    // 如果启用了模拟数据且不是生产环境\r\n    if (MOCK_ENABLED && process.env.NODE_ENV !== 'production') {\r\n      console.log('使用模拟数据', url, options.data);\r\n      return mockRequest(url, options.data);\r\n    }\r\n    \r\n    // 合并请求参数\r\n    options.url = BASE_URL + options.url;\r\n    options.header = options.header || {};\r\n    \r\n    // 添加token认证\r\n    const token = uni.getStorageSync('token');\r\n    if (token) {\r\n      options.header['Authorization'] = `Bearer ${token}`;\r\n    }\r\n    \r\n    // 添加内容类型\r\n    if (options.method !== 'GET') {\r\n      options.header['Content-Type'] = options.header['Content-Type'] || 'application/json';\r\n    }\r\n    \r\n    // 处理请求超时\r\n    options.timeout = options.timeout || 60000;\r\n    \r\n    // 返回Promise\r\n    return new Promise((resolve, reject) => {\r\n      uni.request({\r\n        ...options,\r\n        success: (res) => {\r\n          // 请求成功，但需要检查业务状态码\r\n          if (res.statusCode >= 200 && res.statusCode < 300) {\r\n            // API正常响应\r\n            if (res.data && res.data.code === 0) {\r\n              resolve(res.data);\r\n            } else {\r\n              // 业务错误\r\n              const errMsg = (res.data && res.data.message) || '请求失败';\r\n              uni.showToast({\r\n                title: errMsg,\r\n                icon: 'none',\r\n                duration: 2000\r\n              });\r\n              reject(res.data);\r\n            }\r\n          } else if (res.statusCode === 401) {\r\n            // 未授权，清除token并跳转到登录页\r\n            uni.removeStorageSync('token');\r\n            uni.removeStorageSync('userInfo');\r\n            uni.showToast({\r\n              title: '登录已过期，请重新登录',\r\n              icon: 'none',\r\n              duration: 2000\r\n            });\r\n            setTimeout(() => {\r\n              uni.reLaunch({\r\n                url: '/pages/login/login'\r\n              });\r\n            }, 1500);\r\n            reject(res.data);\r\n          } else {\r\n            // 其他HTTP错误\r\n            uni.showToast({\r\n              title: `网络错误(${res.statusCode})`,\r\n              icon: 'none',\r\n              duration: 2000\r\n            });\r\n            reject(res.data);\r\n          }\r\n        },\r\n        fail: (err) => {\r\n          // 请求失败（网络错误等）\r\n          uni.showToast({\r\n            title: '网络请求失败，请检查网络',\r\n            icon: 'none',\r\n            duration: 2000\r\n          });\r\n          reject(err);\r\n        }\r\n      });\r\n    });\r\n  },\r\n  \r\n  // GET请求\r\n  get(url, data = {}, options = {}) {\r\n    return this.request({\r\n      url,\r\n      data,\r\n      method: 'GET',\r\n      ...options\r\n    });\r\n  },\r\n  \r\n  // POST请求\r\n  post(url, data = {}, options = {}) {\r\n    return this.request({\r\n      url,\r\n      data,\r\n      method: 'POST',\r\n      ...options\r\n    });\r\n  },\r\n  \r\n  // PUT请求\r\n  put(url, data = {}, options = {}) {\r\n    return this.request({\r\n      url,\r\n      data,\r\n      method: 'PUT',\r\n      ...options\r\n    });\r\n  },\r\n  \r\n  // DELETE请求\r\n  delete(url, data = {}, options = {}) {\r\n    return this.request({\r\n      url,\r\n      data,\r\n      method: 'DELETE',\r\n      ...options\r\n    });\r\n  }\r\n};\r\n\r\nexport default http; "],"names":["uni","mockRequest"],"mappings":";;;AAYA,MAAM,OAAO;AAAA,EACX,QAAQ,UAAU,IAAI;AACpB,UAAM,MAAM,QAAQ;AAGuC;AACzDA,0BAAY,MAAA,OAAA,0BAAA,UAAU,KAAK,QAAQ,IAAI;AAChC,aAAAC,uBAAY,KAAK,QAAQ,IAAI;AAAA,IACtC;AAAA,EA4EF;AAAA;AAAA,EAGA,IAAI,KAAK,OAAO,CAAA,GAAI,UAAU,CAAA,GAAI;AAChC,WAAO,KAAK,QAAQ;AAAA,MAClB;AAAA,MACA;AAAA,MACA,QAAQ;AAAA,MACR,GAAG;AAAA,IAAA,CACJ;AAAA,EACH;AAAA;AAAA,EAGA,KAAK,KAAK,OAAO,CAAA,GAAI,UAAU,CAAA,GAAI;AACjC,WAAO,KAAK,QAAQ;AAAA,MAClB;AAAA,MACA;AAAA,MACA,QAAQ;AAAA,MACR,GAAG;AAAA,IAAA,CACJ;AAAA,EACH;AAAA;AAAA,EAGA,IAAI,KAAK,OAAO,CAAA,GAAI,UAAU,CAAA,GAAI;AAChC,WAAO,KAAK,QAAQ;AAAA,MAClB;AAAA,MACA;AAAA,MACA,QAAQ;AAAA,MACR,GAAG;AAAA,IAAA,CACJ;AAAA,EACH;AAAA;AAAA,EAGA,OAAO,KAAK,OAAO,CAAA,GAAI,UAAU,CAAA,GAAI;AACnC,WAAO,KAAK,QAAQ;AAAA,MAClB;AAAA,MACA;AAAA,MACA,QAAQ;AAAA,MACR,GAAG;AAAA,IAAA,CACJ;AAAA,EACH;AACF;;"}